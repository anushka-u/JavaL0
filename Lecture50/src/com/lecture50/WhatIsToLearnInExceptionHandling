====================
Exception Handling
====================
What is exception?
Why to handle exception
Types of exception
Exception vs Error
Exception hierarchy
Checked Exceptions
Un checked Exceptions
Exception Handling keywords
		try
		catch
		throw
		throws
		finally
Exception Propogation
Try with Resources
User Defined Exception


Graceful Termination : Termination after executing program successfully.
Abnormal Termination: Termination in middle of execution.

What is Exception?
-> Exception is unwanted and unexpected situation in the program execution
-> Exception will disturb normal flow of the program execution
-> When exception occur Program will be terminated abnormally
-> To achieve graceful termination we need to handle the exceptions occurred while Program execution

The Process of handling exceptions is known as Exception handling
The main aim of Exception handling is to achieve graceful termination of program


What is Exception Hierarchy
-> In java we have many pre defined exceptions
Ex ArithmaticException
NullPointerException
FileNotFoundException
SQLException

Exception Hierarchy
==========

1> Object
 	|
2> Throwable is further categorised in two part

a> 1.1Exceptions - this can be handled
		1.1.1 Checked Exceptions
		1.1.2 UnChecked Exceptions
b> 1.2Error - cannot be handled

What is the difference between Exception and Error?
Exception can be handled Error can't be

exceptions are divided into two types-
a> checked Exception - will occur at compile time
	Ex- filenotfound
	SQLException 
	IOException etc ..........
	
b> Unchecked Exception - will occur at run time
	nullpointerException
	ArithmaticException etc ................
	
=================================================
Java Provided five keywords to handle Exception
		try
		catch
		throw
		throws
		finally
		
try
=====
-> it is used to keep risky code
-> we cannot write only try block, we need to write it with either catch block or finally block or both
syntax
	try
	{
		//stmts
	}
	catch
	{
		//logic
	}

try - catch.......--> valid combination
try -finally -----> valid
try - catch -fianlly ----> valid
try ---> invalid


catch
=============
-> catch block is used to catch the execution which occurred in try block
-> To write catch block, try block is mandatory

syntax
try
{	
	//logic
}
catch(Exception e)
{
	//logic
}

IF there will be error in try block then only catch block will execute

==========================================================
We can write one try block with multpile catch block.
The best approach  to write catch block is to go with Exception e
bcoz it will handle all kind of exception whether that exception is due to null pointer or Arithmetic Exception etcetra.
===================================================================

		try {
			System.out.println("Try MEthod started");
			String s = null;
			System.out.println(s.length()); // will throw nullpointerException
			System.out.println("Try Method Ended");
		}catch(Exception e)
		{
			e.printStackTrace();
			System.out.println("Got Exception in trying so Catch method started and ended");
		}catch(ArithmeticException exp)
		{
			e.printStackTree();
		}
		
In above scenario we will be getting compile time error
because of unreachable second catch block, the reason it it unreachable is because 
Exception e will be handling all kind of scenario beforehand itself.

======================================================================

-> try
{
}
catch (NullPointerException e)
{
}
catch (ArithmeticException ex)
{
}

above one is valid because we can write one try block with multiple catch block
because as per kind of exception the code will be executed.

===============================================================================

finally block---

-> It is used to perform resource cleanup activity
-> finally block will execute always

try - finally - Valid
try - catch - finally - Valid
catch - finally - invalid
only finally - Invalid	

	
=======================================================================

What is difference between final, finally and finalize?

-> Final : It is a keyword which is used to declare the final variables, final methods and final class
finalize() - It is a predefined method available in object class and it will be called by garbage collector before
removing object from heap area	
finally -> The finally block in java is used to put important codes such as clean up code e.g. closing the file or 
closing the connection. The finally block executes whether exception rise or not and whether exception handled or not.



Nested try blocks are valid - we can write one try block within a try or catch block.


